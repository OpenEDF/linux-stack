# SPDX-License-Identifier: GPL-2.0-or-later
# Reference from: https://github.com/openocd-org/openocd/blob/master/tcl/target/imx6ul.cfg
#
# Freescale i.MX6UltraLite series: 6UL 6ULL 6ULZ
#

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME imx6ul
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
    set _DAP_TAPID $DAP_TAPID
} else {
    set _DAP_TAPID 0x4ba00477
}

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x01 -irmask 0x0f \
        -expected-id $_DAP_TAPID

# SDMA / no IDCODE
jtag newtap $_CHIPNAME sdma -irlen 4 -ircapture 0x00 -irmask 0x0f

# System JTAG Controller
set _SJC_TAPID_6UL  0x0891d01d
set _SJC_TAPID_6ULL 0x0891e01d
set _SJC_TAPID_6ULZ 0x1891e01d

# Allow external override of the first SJC TAPID
if { [info exists SJC_TAPID] } {
    set _SJC_TAPID $SJC_TAPID
} else {
    set _SJC_TAPID $_SJC_TAPID_6UL
}

jtag newtap $_CHIPNAME sjc -irlen 5 -ircapture 0x01 -irmask 0x1f \
        -ignore-version -expected-id $_SJC_TAPID 

# Create DAP
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

# Main AHB bus
target create $_CHIPNAME.ahb mem_ap -dap $_CHIPNAME.dap -ap-num 0

# Cortex-A7 single core
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_a -dap $_CHIPNAME.dap -dbgbase 0x82130000

# tcl fucntion for openocd
proc imx6ull_dummy_init {} {
    puts "imx6ull dummy init begin"
    halt
    puts "imx6ull dummy init end"
}

# disable watchdog
proc disable_wdog { } {
    mwh 0x020bc000 0x30
}

# function to apply initial configuration after a reset. It
# provides a basic pad configuration and also DDR memory and clocks
# sufficient to load and execute a boot loader (e.g. barebox) from
# DDR memory. This list is extracted from the barebox flash image
# header.
proc dcd_header { } {
    mww 0x020c4068 0xffffffff
    mww 0x020c406c 0xffffffff
    mww 0x020c4070 0xffffffff
    mww 0x020c4074 0xffffffff
    mww 0x020c4078 0xffffffff
    mww 0x020c407c 0xffffffff
    mww 0x020c4080 0xffffffff

    mww 0x020E04B4 0x000C0000
    mww 0x020E04AC 0x00000000
    mww 0x020E027C 0x00000030
    mww 0x020E0250 0x00000030
    mww 0x020E024C 0x00000030
    mww 0x020E0490 0x00000030
    mww 0x020E0288 0x000C0030
    mww 0x020E0270 0x00000000
    mww 0x020E0260 0x00000030
    mww 0x020E0264 0x00000030
    mww 0x020E04A0 0x00000030
    mww 0x020E0494 0x00020000
    mww 0x020E0280 0x00000030
    mww 0x020E0284 0x00000030
    mww 0x020E04B0 0x00020000
    mww 0x020E0498 0x00000030
    mww 0x020E04A4 0x00000030
    mww 0x020E0244 0x00000030
    mww 0x020E0248 0x00000030
    mww 0x021B001C 0x00008000
    mww 0x021B0800 0xA1390003
    mww 0x021B080C 0x00000004
    mww 0x021B083C 0x41640158
    mww 0x021B0848 0x40403237
    mww 0x021B0850 0x40403C33
    mww 0x021B081C 0x33333333
    mww 0x021B0820 0x33333333
    mww 0x021B082C 0xf3333333
    mww 0x021B0830 0xf3333333
    mww 0x021B08C0 0x00944009
    mww 0x021B08b8 0x00000800
    mww 0x021B0004 0x0002002D
    mww 0x021B0008 0x1B333030
    mww 0x021B000C 0x676B52F3
    mww 0x021B0010 0xB66D0B63
    mww 0x021B0014 0x01FF00DB
    mww 0x021B0018 0x00201740
    mww 0x021B001C 0x00008000
    mww 0x021B002C 0x000026D2
    mww 0x021B0030 0x006B1023
    mww 0x021B0040 0x0000004F
    mww 0x021B0000 0x84180000
    mww 0x021B0890 0x00400000
    mww 0x021B001C 0x02008032
    mww 0x021B001C 0x00008033
    mww 0x021B001C 0x00048031
    mww 0x021B001C 0x15208030
    mww 0x021B001C 0x04008040
    mww 0x021B0020 0x00000800
    mww 0x021B0818 0x00000227
    mww 0x021B0004 0x0002552D
    mww 0x021B0404 0x00011006
    mww 0x021B001C 0x00000000
}

# This program resets the regs to the address 0x00908000
# making the incorrect assumption that the start of the code
# is located in OCRAM.
# It sets up the cpsr so we can run the code properly.
proc clear_regs {} {
     puts "clear_regs begin"
     reg r1 0
     reg r2 0
     reg r3 0
     reg r4 0
     reg r5 0
     reg r6 0
     reg r7 0
     reg r8 0
     reg r9 0
     reg r10 0
     reg r11 0
     reg r12 0

     # assume our executable is at 0x00908000. otherwise the
     #   user must manually set the value after a reset.
     reg pc 0x00908000

     # shamelessly stolen from the samsung configuration
     #   this fixes problems executing loaded code.
     reg cpsr 0x1d3
     arm mcr 15 0 15 2 4 0x70000013

     puts "clear_regs end"
}

# reset init
proc fire_init { } {
    global _TARGETNAME
    $_TARGETNAME arm core_state arm
    #disable_wdog
    #clear_regs
    dcd_header
}

# Config command
$_TARGETNAME configure -event reset-assert { }
#$_TARGETNAME configure -event reset-start { adapter speed 10000 }
$_TARGETNAME configure -event reset-init { fire_init }
#$_TARGETNAME configure -event reset-end clear_reg
$_TARGETNAME configure -event gdb-attach { halt }

